\documentclass{beamer}

\mode<presentation>
{
  \usetheme{Berkeley}
  \usecolortheme{crane}
}

\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{polski}

% For pygmentize
\usepackage{fancyvrb}
\usepackage{color}

\input{styles}
\title{Programowanie obiektowe w Pythonie}
\author[]{Szymon Pyżalski}

\date{4 -- 8 XII 2017}
\logo{\includegraphics[width=1.5cm]{vavatech_logo_small.png}}

\begin{document}

\begin{frame}
  \titlepage
\end{frame}

\section{Teoria}
\insertsectionhead

\begin{frame}{Zarys teorii OOP}
    \begin{itemize}
    \pause
    \item Abstrakcja programu opisana jest zależnościami między obiektami
    \pause
    \item Obiekty przynależą do klas
    \pause
    \item Klasy zdefiniowane są przez posiadane pola danych i metody
    \end{itemize}
\end{frame}

\begin{frame}{Specyfika OOP w Pythonie}
    \begin{itemize}
    \item Wszystko jest obiektem!
    \pause
    \item Nie musimy deklarować nazw pól.
    \pause
    \item Istnieją klasy, ale ważne jest jakie metody zdefiniowaliśmy
        \emph{(duck typing)}
    \end{itemize}
\end{frame}

\section{Definiowanie obiektów}
\insertsectionhead

\begin{frame}{Prosty obiekt}
    \begin{tiny}
    \input{object_simple}
    \end{tiny}
\end{frame}

\begin{frame}{Specjalne metody}
    \begin{itemize}
    \pause
    \item \texttt{\_\_init\_\_} -- inicjalizator
    \pause
    \item \texttt{\_\_repr\_\_} -- reprezentacja jako string dla maszyny
    \pause
    \item \texttt{\_\_str\_\_} -- reprezentacja jako string dla człowieka
    \pause
    \item \texttt{\_\_int\_\_} \texttt{\_\_float\_\_} etc. -- konwersja typów
    \end{itemize}
\end{frame}

\begin{frame}{Zadanie}
    zadanie4-1.py
\end{frame}

\begin{frame}{Properties}
    \begin{itemize}
    \pause
    \item Umożliwiają zaawansowaną logikę ustawiania i odczytu danych z obiektu
    \pause
    \item Dekorator \texttt{@property} oznacza gettera.
    \pause
    item Dekoratory \texttt{@nazwa.setter} i \texttt{@nazwa.deleter}
    oznaczają pozostałe dwie metody
    \end{itemize}
\end{frame}

\begin{frame}{Properties}
    \begin{tiny}
    \input{properties}
    \end{tiny}
\end{frame}

\begin{frame}{Zadanie}
    zadanie4-2.py
\end{frame}

\begin{frame}{Przeciążanie operatorów}
    \begin{itemize}
    \pause
    \item Przeciążania dokonujemy dzięki magicznym metodom
    \pause
    \item Nie wszystkie operatory da się przeciążyć
    \pause
    \item Przeciążajmy sensownie
    \end{itemize}
\end{frame}

\begin{frame}{Zadanie}
    zadanie4-3.py
\end{frame}

\begin{frame}{}
    \begin{itemize}
    \pause
    \item Przeciążania dokonujemy dzięki ,,magicznym'' metodom
    \pause
    \item Nie wszystkie operatory da się przeciążyć
    \pause
    \item Przeciążajmy sensownie
    \end{itemize}
\end{frame}

\begin{frame}{Enkapsulacja}
    \begin{itemize}
    \pause
    \item Obiekty bez znaku podkreślnika są publiczne
    \pause
    \item Obiekty zaczynające się od jednego podkreślnika są na zasadzie
        konwencji prywatne/chronione
    \pause
    \item Obiekty zaczynające się od dwóch podkreślników podlegają ,,\emph{name
        mangling}''. Nadal nie są jednak naprawdę prywatne.
    \end{itemize}
\end{frame}

\begin{frame}{Dziedziczenie}
    \begin{itemize}
    \pause
    \item Klasa może dziedziczyć po jednej lub więcej klas basowych
    \pause
    \item Domyślną klasą bazową jest \texttt{object}
    \pause
    \item Klasy bazowe wołamy ręcznie przy pomocy \texttt{super}.
    \end{itemize}
\end{frame}

\begin{frame}{Dziedziczenie}
    \begin{tiny}
    \input{inheritance}
    \end{tiny}
\end{frame}

\begin{frame}{Dziedziczenie wielokrotne}
    \begin{tiny}
    \input{multiple_inh}
    \end{tiny}
\end{frame}
\end{document}
